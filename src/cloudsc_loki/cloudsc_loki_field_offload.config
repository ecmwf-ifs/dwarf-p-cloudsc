[default]
# Specifies the behaviour of auto-expanded routines
role = 'kernel'
expand = true  # Automatically expand subroutine calls
strict = true  # Throw exceptions during dicovery
enable_imports = true  # Chase dependencies incurred via imports

# disable - not parsed and not transformed
# block - contained as nodes but never parsed/transformed
# ignore - are parsed but not transformed

disable = [
    'abor1', 'timer_mod', 'abort', 'file_io_mod', 'foe*',
    'fokoop', 'get_environment_variable', '*%update_view',
    'cloudsc_mpi_*', 'ec_pmon', 'expand_*', 'load_and_expand_*',
    'validate_*', 'get_offsets', 'error_print',
    '*get_device_data_rdonly', '*get_device_data_rdwr', '*sync_host_rdwr'
]

ignore = ['parkind1', 'yomphyder', 'yoecldp', 'fc*_mod']


# Define entry point for call-tree transformation
[routines.cloudsc_driver_field]
  role = 'driver'
  expand = true


# Define indices and bounds for array dimensions
[dimensions.horizontal]
  size = 'KLON'
  index = 'JL'
  bounds = ['KIDIA', 'KFDIA']
  aliases = ['NPROMA', 'KDIM%KLON']

[dimensions.vertical]
  size = 'KLEV'
  index = 'JK'

[dimensions.block_dim]
  size = 'NGPBLKS'
  index = 'IBL'


# Overwrite frontend for header modules that cannot be parsed via OMNI
[frontend_args]

[frontend_args."yomphyder.F90"]
frontend = 'FP'

[frontend_args."yomcst.F90"]
frontend = 'FP'

[frontend_args."yoethf.F90"]
frontend = 'FP'

[frontend_args."yoecldp.F90"]
frontend = 'FP'


[transformations.Idem]
  classname = 'IdemTransformation'
  module = 'loki.transformations'


# Loki-SCC
# -----------------------------------------
[transformations.SCCVector]
  classname = 'SCCVectorPipeline'
  module = 'loki.transformations.single_column'
[transformations.SCCVector.options]
  horizontal = '%dimensions.horizontal%'
  block_dim = '%dimensions.block_dim%'
  directive = 'openacc'

# Housekeeping and other transformations
# -----------------------------------------
[transformations.FieldOffload]
  classname = 'FieldOffloadTransformation'
  module = "loki.transformations"
  options = {Â field_group_types = ['CLOUDSC_STATE_TYPE', 'CLOUDSC_AUX_TYPE', 'CLOUDSC_FLUX_TYPE'] }

[transformations.DataOffload]
  classname = 'DataOffloadTransformation'
  module = 'loki.transformations'
  options = { remove_openmp = true, claw_data_offload = false, assume_deviceptr = false, present_on_device = true }

[transformations.ModuleWrap]
  classname = 'ModuleWrapTransformation'
  module = 'loki.transformations.build_system'
  options = { module_suffix = '_MOD' }

[transformations.Dependency]
  classname = 'DependencyTransformation'
  module = 'loki.transformations.build_system'
  options = { suffix = '_LOKI', module_suffix = '_MOD' }


# Full transformation pipelines
# -----------------------------------------
[pipelines]

[pipelines.idem]
  transformations = ['Idem', 'ModuleWrap', 'Dependency']

[pipelines.scc-field]
  transformations = ['FieldOffload', 'DataOffload', 'SCCVector', 'ModuleWrap', 'Dependency']
