# -------------------------------------------------------------------
# Loki source transformation configurations
# -------------------------------------------------------------------
# This file contains configurations for multiple source transformation
# pipelines and batch processing settings to apply Loki transformations
# to the CLOUDSC source tree.


# Loki batch scheduler configuration
# -------------------------------------------------------------------
# The Loki batch scheduler performs automated discovery of call trees
# from a select set of seed subroutines. Whenever it adds new
# nodes to the call tree, the following default behaviour will be
# honoured, unless it is specifically overwritten below.

[default]
role = 'kernel'  # Role to determine how to transform a routine
expand = true  # Automatically expand call tree to subroutine calls
strict = true  # Throw exceptions during dicovery
enable_imports = true  # Chase dependencies incurred via imports

# Ensure that we are never adding these to the tree, and thus
# do not attempt to look up the source files for these.
# disable = ['timer_mod', 'abort', 'file_io_mod', 'foe*', 'fokoop',
#   'ceiling', 'dim3', 'cuda*', 'yoethf_cuf', 'yomcst_cuf']
disable = [
    'timer_mod', 'abort', 'file_io_mod', 'foe*', 'fokoop',
    'ceiling', 'dim3', 'cuda*', 'yoethf_cuf', 'yomcst_cuf',
]

# Prune these moduels from the treeto ensure they are not processed by
# transformations
ignore = ['parkind1', 'yomphyder', 'yoecldp', 'fc*_mod']


# Call tree entry points ("driver" subroutines)
# -------------------------------------------------------------------
#
# Note that Loki differentiates between "driver" routines, which act as
# call tree roots and contain the offload and parallelisation loops, and
# "kernel" routines that only contain compute loops and are called
# from drivers or other kernels within parallel sections.
[routines]

[routines.cloudsc_driver]
  role = 'driver'
  expand = true


# Configuration of "Dimension" variables
# -------------------------------------------------------------------
# Loki uses rigorously enforced variable naming conventions to
# identifiy loops that pertain to a particular scientific dimension.
[dimensions]

# The horizontal dimension that signifies the vecotr dimension
[dimensions.horizontal]
  size = 'KLON'
  index = 'JL'
  bounds = ['KIDIA', 'KFDIA']
  aliases = ['NPROMA', 'KDIM%KLON']

# The vertical data dimension for advanced optimisations
[dimensions.vertical]
  size = 'KLEV'
  index = 'JK'

# The outer loop blocking dimension in the parallel driver
[dimensions.block_dim]
  size = 'NGPBLKS'
  index = 'IBL'
  aliases = ['JKGLO']  
  index_aliases = ['JKGLO']

# Frontend argument overrides
# -------------------------------------------------------------------
# Certain header modules can only be processed by the FP frontend
[frontend_args]

[frontend_args."yomphyder.F90"]
frontend = 'FP'

[frontend_args."yomcst.F90"]
frontend = 'FP'

[frontend_args."yoethf.F90"]
frontend = 'FP'

[frontend_args."yoecldp.F90"]
frontend = 'FP'

[frontend_args."cloudsc.F90"]
preprocess = true


# Define specific transformation settings
# -------------------------------------------------------------------
# The section configures the invididual steps of the transformation
# pipelines. Importantly, it also defines the class name and Python
# module that Transformation objecst will be instatiated from.
[transformations]

# A set of utility transformations
# -------------------------------------------------------------------
[transformations.Idem]
  classname = 'IdemTransformation'
  module = 'loki.transformations'


[transformations.SCA]
  classname = 'ExtractSCATransformation'
  module = 'loki.transformations.single_column'
[transformations.SCA.options]
  horizontal = '%dimensions.horizontal%'


[transformations.CLAW]
  classname = 'CLAWTransformation'
  module = 'loki.transformations.single_column'
[transformations.CLAW.options]
  horizontal = '%dimensions.horizontal%'
  claw_data_offload = false


[transformations.Stack]
  classname = 'TemporariesPoolAllocatorTransformation'
  module = 'loki.transformations'
[transformations.Stack.options]
  block_dim = '%dimensions.block_dim%'
  directive = 'openmp'
  check_bounds = true


[transformations.InlineTransformation]
  classname = 'InlineTransformation'
  module = 'loki.transformations'
[transformations.InlineTransformation.options]
  inline_internals = false
  inline_marked = true
  inline_stmt_funcs = true
  remove_dead_code = true
  allowed_aliases = 'JL'
  resolve_sequence_association = false


# Loki-SCC family of transformations
# -------------------------------------------------------------------
# A set of transformation passes that transforms SIMD vectorisation
# loops into SIMD-style loops for coalesced memory access on GPU.
# It also contains passes that improve device memory handling on GPUs.
[transformations.SCCVector]
  classname = 'SCCVectorPipeline'
  module = 'loki.transformations.single_column'
[transformations.SCCVector.options]
  horizontal = '%dimensions.horizontal%'
  block_dim = '%dimensions.block_dim%'
  directive = 'openacc'


[transformations.SCCHoist]
  classname = 'SCCHoistPipeline'
  module = 'loki.transformations.single_column'
[transformations.SCCHoist.options]
  horizontal = '%dimensions.horizontal%'
  block_dim = '%dimensions.block_dim%'
  directive = 'openacc'


[transformations.SCCStack]
  classname = 'SCCStackPipeline'
  module = 'loki.transformations.single_column'
[transformations.SCCStack.options]
  horizontal = '%dimensions.horizontal%'
  block_dim = '%dimensions.block_dim%'
  directive = 'openacc'
  check_bounds = false

###
# Please note that these are intended for eventual refactoring!
[transformations.SccCuf-hoist]
  classname = 'SCCLowLevelCufHoist'
  module = 'loki.transformations.single_column'
[transformations.SccCuf-hoist.options]
  transformation_type = 'hoist'
  horizontal = '%dimensions.horizontal%'
  vertical = '%dimensions.vertical%'
  block_dim = '%dimensions.block_dim%'
  derived_types = ['TECLDP']
  ignore_modules = ['parkind1']

[transformations.SccCuf-parametrise]
  classname = 'SCCLowLevelCufParametrise'
  module = 'loki.transformations.single_column'
[transformations.SccCuf-parametrise.options]
  transformation_type = 'parametrise'
  horizontal = '%dimensions.horizontal%'
  vertical = '%dimensions.vertical%'
  block_dim = '%dimensions.block_dim%'
  derived_types = ['TECLDP']
  ignore_modules = ['parkind1']
  dic2p = {NLEV = 137}

[transformations.SccCuda-hoist]
  classname = 'SCCLowLevelHoist'
  module = 'loki.transformations.single_column'
[transformations.SccCuda-hoist.options]
  transformation_type = 'hoist'
  horizontal = '%dimensions.horizontal%'
  vertical = '%dimensions.vertical%'
  block_dim = '%dimensions.block_dim%'
  derived_types = ['TECLDP']
  mode = 'cuda'
  as_kwarguments = true
  hoist_parameters = false
  ignore_modules = ['parkind1']
  all_derived_types = true

[transformations.SccCuda-parametrise]
  classname = 'SCCLowLevelParametrise'
  module = 'loki.transformations.single_column'
[transformations.SccCuda-parametrise.options]
  transformation_type = 'parametrise'
  horizontal = '%dimensions.horizontal%'
  vertical = '%dimensions.vertical%'
  block_dim = '%dimensions.block_dim%'
  derived_types = ['TECLDP']
  mode = 'cuda'
  # dim_vars = ['%dimensions.vertical.size%']
  as_kwarguments = true
  hoist_parameters = false
  ignore_modules = ['parkind1']
  all_derived_types = true
  dic2p = {NLEV = 137}
###

# Housekeeping and other transformations
# -------------------------------------------------------------------
[transformations.DataOffload]
  classname = 'DataOffloadTransformation'
  module = 'loki.transformations'
  options = { remove_openmp = true, claw_data_offload = false }


[transformations.Sanitise]
  classname = 'SanitiseTransformation'
  module = 'loki.transformations'
  options = { resolve_associate_mappings = true }


[transformations.ModuleWrap]
  classname = 'ModuleWrapTransformation'
  module = 'loki.transformations.build_system'
  options = { module_suffix = '_MOD' }


[transformations.Dependency]
  classname = 'DependencyTransformation'
  module = 'loki.transformations.build_system'
  options = { suffix = '_LOKI', module_suffix = '_MOD' }


# Full transformation pipelines
# -------------------------------------------------------------------
# The entries below are mapped to the "mode" entry point in
# loki-transform.py. The define the set of transformation and the
# order in which they are applies to the complete call tree.
[pipelines]

[pipelines.idem]
  transformations = ['Idem', 'ModuleWrap', 'Dependency']

[pipelines.idem-stack]
  transformations = ['Idem', 'Sanitise', 'Stack', 'ModuleWrap', 'Dependency']

[pipelines.sca]
  transformations = ['SCA', 'ModuleWrap', 'Dependency']

[pipelines.claw-cpu]
  transformations = ['CLAW', 'ModuleWrap', 'Dependency']

[pipelines.claw-gpu]
  transformations = ['DataOffload', 'CLAW', 'ModuleWrap', 'Dependency']

[pipelines.scc]
  transformations = ['DataOffload', 'SCCVector', 'ModuleWrap', 'Dependency']

[pipelines.scc-hoist]
  transformations = ['DataOffload', 'SCCHoist', 'ModuleWrap', 'Dependency']

[pipelines.scc-stack]
  transformations = ['DataOffload', 'Sanitise', 'SCCStack', 'ModuleWrap', 'Dependency']

# SCC-CUF transformation pipelines
# -----------------------------------------
# [pipelines]

[pipelines.cuf-parametrise]
  transformations = [
    'Sanitise', 'DataOffload', 'SccCuf-parametrise', 'ModuleWrap', 'Dependency'
  ]

[pipelines.cuf-hoist]
  transformations = [
    'Sanitise', 'DataOffload', 'SccCuf-hoist', 'ModuleWrap', 'Dependency'
  ]
  
[pipelines.cuda-parametrise]
  transformations = [ 
    'Sanitise', 'SccCuda-hoist'
] 
  
[pipelines.cuda-hoist]
  transformations = [
    'Sanitise', 'SccCuda-hoist'
] 
