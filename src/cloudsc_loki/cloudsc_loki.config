[default]
# Specifies the behaviour of auto-expanded routines
role = 'kernel'
expand = true  # Automatically expand subroutine calls
strict = true  # Throw exceptions during dicovery
enable_imports = true  # Chase dependencies incurred via imports

# Ensure that we are never adding these to the tree, and thus
# do not attempt to look up the source files for these.
disable = ['timer_mod', 'abort', 'file_io_mod', 'foe*', 'fokoop']

# Prune the tree for these to ensure they are not processed by transformations
ignore = ['parkind1', 'yomphyder', 'yoecldp', 'fc*_mod']

# Define entry point for call-tree transformation
[routines]

[routines.cloudsc_driver]
  role = 'driver'
  expand = true


# Define indices and bounds for array dimensions
[dimensions]

[dimensions.horizontal]
  size = 'KLON'
  index = 'JL'
  bounds = ['KIDIA', 'KFDIA']
  aliases = ['NPROMA', 'KDIM%KLON']

[dimensions.vertical]
  size = 'KLEV'
  index = 'JK'

[dimensions.block_dim]
  size = 'NGPBLKS'
  index = 'IBL'


# Overwrite frontend for header modules that cannot be parsed via OMNI
[frontend_args]

[frontend_args."yomphyder.F90"]
frontend = 'FP'

[frontend_args."yomcst.F90"]
frontend = 'FP'

[frontend_args."yoethf.F90"]
frontend = 'FP'

[frontend_args."yoecldp.F90"]
frontend = 'FP'

# Define specific transformation settings
[transformations]

[transformations.Idem]
  classname = 'IdemTransformation'
  module = 'loki.transformations'


[transformations.SCA]
  classname = 'ExtractSCATransformation'
  module = 'loki.transformations.single_column'
[transformations.SCA.options]
  horizontal = '%dimensions.horizontal%'


[transformations.CLAW]
  classname = 'CLAWTransformation'
  module = 'loki.transformations.single_column'
[transformations.CLAW.options]
  horizontal = '%dimensions.horizontal%'
  claw_data_offload = false


[transformations.Stack]
  classname = 'TemporariesPoolAllocatorTransformation'
  module = 'loki.transformations'
[transformations.Stack.options]
  block_dim = '%dimensions.block_dim%'
  directive = 'openmp'
  check_bounds = true


# Loki-SCC family
# -----------------------------------------
[transformations.SCCVector]
  classname = 'SCCVectorPipeline'
  module = 'loki.transformations.single_column'
[transformations.SCCVector.options]
  horizontal = '%dimensions.horizontal%'
  block_dim = '%dimensions.block_dim%'
  directive = 'openacc'


[transformations.SCCHoist]
  classname = 'SCCHoistPipeline'
  module = 'loki.transformations.single_column'
[transformations.SCCHoist.options]
  horizontal = '%dimensions.horizontal%'
  block_dim = '%dimensions.block_dim%'
  directive = 'openacc'


[transformations.SCCStack]
  classname = 'SCCStackPipeline'
  module = 'loki.transformations.single_column'
[transformations.SCCStack.options]
  horizontal = '%dimensions.horizontal%'
  block_dim = '%dimensions.block_dim%'
  directive = 'openacc'
  check_bounds = false


# Housekeeping and other transformations
# -----------------------------------------
[transformations.DataOffload]
  classname = 'DataOffloadTransformation'
  module = 'loki.transformations'
  options = { remove_openmp = true, claw_data_offload = false }


[transformations.Sanitise]
  classname = 'SanitiseTransformation'
  module = 'loki.transformations'
  options = { resolve_associate_mappings = true }


[transformations.ModuleWrap]
  classname = 'ModuleWrapTransformation'
  module = 'loki.transformations.build_system'
  options = { module_suffix = '_MOD' }


[transformations.Dependency]
  classname = 'DependencyTransformation'
  module = 'loki.transformations.build_system'
  options = { suffix = '_LOKI', module_suffix = '_MOD' }


# Full transformation pipelines
# -----------------------------------------
[pipelines]

[pipelines.idem]
  transformations = ['Idem', 'ModuleWrap', 'Dependency']

[pipelines.idem-stack]
  transformations = ['Idem', 'Sanitise', 'Stack', 'ModuleWrap', 'Dependency']

[pipelines.sca]
  transformations = ['SCA', 'ModuleWrap', 'Dependency']

[pipelines.claw-cpu]
  transformations = ['CLAW', 'ModuleWrap', 'Dependency']

[pipelines.claw-gpu]
  transformations = ['DataOffload', 'CLAW', 'ModuleWrap', 'Dependency']

[pipelines.scc]
  transformations = ['DataOffload', 'SCCVector', 'ModuleWrap', 'Dependency']

[pipelines.scc-hoist]
  transformations = ['DataOffload', 'SCCHoist', 'ModuleWrap', 'Dependency']

[pipelines.scc-stack]
  transformations = ['DataOffload', 'Sanitise', 'SCCStack', 'ModuleWrap', 'Dependency']
