[default]
# Specifies the behaviour of auto-expanded routines
role = 'kernel'
expand = true  # Automatically expand subroutine calls
strict = true  # Throw exceptions during dicovery
enable_imports = true  # Chase dependencies incurred via imports

# Ensure that we are never adding these to the tree, and thus
# do not attempt to look up the source files for these.
disable = [
    'timer_mod', 'abort', 'file_io_mod', 'foe*', 'fokoop',
    'ceiling', 'dim3', 'cuda*', 'yoethf_cuf', 'yomcst_cuf',
]

# Prune the tree for these to ensure they are not processed by transformations
ignore = ['parkind1', 'yomphyder', 'yoecldp', 'fc*_mod']

# Define entry point for call-tree transformation
[routines]

[routines.cuf_cloudsc_driver]
role = 'driver'
expand = true


# Define indices and bounds for array dimensions
[dimensions]

[dimensions.horizontal]
  size = 'KLON'
  index = 'JL'
  bounds = ['KIDIA', 'KFDIA']
  aliases = ['NPROMA', 'KDIM%KLON']

[dimensions.vertical]
  size = 'KLEV'
  index = 'JK'

[dimensions.block_dim]
  size = 'NGPBLKS'
  index = 'IBL'
  aliases = ['JKGLO']


# Define specific transformation settings
[transformations]

# Loki-SCC-CUF family
# -----------------------------------------
# For these, we need to explicitly define the "transformation_type"
# and provide the names of derived types for extracting device code.
#
# Please note that these are intended for eventual refactoring!
[transformations.cuf-hoist]
  classname = 'SccCufTransformation'
  module = 'loki.transformations.single_column'
[transformations.cuf-hoist.options]
  transformation_type = 'hoist'
  horizontal = '%dimensions.horizontal%'
  vertical = '%dimensions.vertical%'
  block_dim = '%dimensions.block_dim%'
  derived_types = ['TECLDP']

[transformations.cuf-dynamic]
  classname = 'SccCufTransformation'
  module = 'loki.transformations.single_column'
[transformations.cuf-dynamic.options]
  transformation_type = 'dynamic'
  horizontal = '%dimensions.horizontal%'
  vertical = '%dimensions.vertical%'
  block_dim = '%dimensions.block_dim%'
  derived_types = ['TECLDP']

[transformations.cuf-parametrise]
  classname = 'SccCufTransformation'
  module = 'loki.transformations.single_column'
[transformations.cuf-parametrise.options]
  transformation_type = 'parametrise'
  horizontal = '%dimensions.horizontal%'
  vertical = '%dimensions.vertical%'
  block_dim = '%dimensions.block_dim%'
  derived_types = ['TECLDP']

# For SCC-CUF-parametrise we need to define the
# in-source replacement via "dic2p".
[transformations.ParametriseTransformation]
  module = 'loki.transformations'
  options = { dic2p = {NLEV = 137} }
